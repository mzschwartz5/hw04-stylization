SAMPLER(sampler_point_clamp);

// Gaussian kernel
static const float kernel[9][9] = {
    { 0.0000, 0.0000, 0.0002, 0.0006, 0.0008, 0.0006, 0.0002, 0.0000, 0.0000 },
    { 0.0000, 0.0011, 0.0040, 0.0073, 0.0091, 0.0073, 0.0040, 0.0011, 0.0000 },
    { 0.0002, 0.0040, 0.0148, 0.0270, 0.0336, 0.0270, 0.0148, 0.0040, 0.0002 },
    { 0.0006, 0.0073, 0.0270, 0.0493, 0.0614, 0.0493, 0.0270, 0.0073, 0.0006 },
    { 0.0008, 0.0091, 0.0336, 0.0614, 0.0765, 0.0614, 0.0336, 0.0091, 0.0008 },
    { 0.0006, 0.0073, 0.0270, 0.0493, 0.0614, 0.0493, 0.0270, 0.0073, 0.0006 },
    { 0.0002, 0.0040, 0.0148, 0.0270, 0.0336, 0.0270, 0.0148, 0.0040, 0.0002 },
    { 0.0000, 0.0011, 0.0040, 0.0073, 0.0091, 0.0073, 0.0040, 0.0011, 0.0000 },
    { 0.0000, 0.0000, 0.0002, 0.0006, 0.0008, 0.0006, 0.0002, 0.0000, 0.0000 }
};

void GaussianBlur_float(float2 uv, float2 texelSize, out float3 result)
{
    float3 sum = float3(0, 0, 0);
    float3 sample = float3(0, 0, 0);
    float2 offset = float2(0, 0);
    for (int i = 0; i < 9; i++)
    {
        for (int j = 0; j < 9; j++)
        {
            offset = float2(i - 4, j - 4);
            sample = SAMPLE_TEXTURE2D(_BloomBuffer, sampler_point_clamp, uv + offset * texelSize).rgb;
            sum += sample * kernel[i][j];
        }
    }
    result = sum;
}
